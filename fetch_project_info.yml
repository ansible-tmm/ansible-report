- name: Print current project ID
  ansible.builtin.debug:
    msg: "Processing Project ID: {{ project_id }}"

- name: Fetch project information
  ansible.builtin.uri:
    url: "https://{{ automation_controller_host }}/api/v2/projects/{{ project_id }}"
    method: GET
    headers:
      Authorization: "Bearer {{ oauth_token }}"
    force_basic_auth: true
    validate_certs: "{{ verify_ssl }}"
    return_content: true
  register: project_info

- name: Fetch job template information
  ansible.builtin.uri:
    url: "https://{{ automation_controller_host }}/api/v2/job_templates/?project_id={{ project_id }}"
    method: GET
    headers:
      Authorization: "Bearer {{ oauth_token }}"
    force_basic_auth: true
    validate_certs: "{{ verify_ssl }}"
    return_content: true
  register: job_template_info

- name: Fetch job template counts
  ansible.builtin.uri:
    url: "https://{{ automation_controller_host }}/api/v2/job_templates/{{ item.id }}/jobs/?project_id={{ project_id }}&created__gt={{ two_weeks_ago | default(omit, true) }}"
    method: GET
    headers:
      Authorization: "Bearer {{ oauth_token }}"
    force_basic_auth: true
    validate_certs: "{{ verify_ssl }}"
    return_content: true
  register: job_template_counts
  loop: "{{ job_template_info.json.results }}"
  loop_control:
    label: "{{ item.id }}"

- name: Print out job_template_counts
  ansible.builtin.debug:
    var: job_template_counts

- name: Fetch job list with pagination details
  ansible.builtin.uri:
    url: "https://{{ automation_controller_host }}/api/v2/jobs/?project_id={{ project_id }}&page_size={{ page_size }}&created__gt={{ two_weeks_ago | default(omit, true) }}"
    method: GET
    headers:
      Authorization: "Bearer {{ oauth_token }}"
    force_basic_auth: true
    validate_certs: "{{ verify_ssl }}"
    return_content: true
  register: job_list_response

- name: Calculate total pages (ensuring it's at least 1)
  ansible.builtin.set_fact:
    total_pages: "{{ ((job_list_response.json.count + page_size - 1) // page_size) if (job_list_response.json.count + page_size - 1) // page_size > 0 else 1 }}"

- name: Debug total pages
  ansible.builtin.debug:
    msg:
      - "Page size: {{ page_size }}"
      - "Total jobs: {{ job_list_response.json.count }}"
      - "Total number of pages: {{ total_pages }}"

- name: Retrieve job list for each page and store in a dictionary
  ansible.builtin.uri:
    url: "https://{{ automation_controller_host }}/api/v2/jobs/?project_id={{ project_id }}&page_size={{ page_size }}&page={{ item }}&created__gt={{ two_weeks_ago | default(omit, true) }}"
    method: GET
    headers:
      Authorization: "Bearer {{ oauth_token }}"
    force_basic_auth: true
    validate_certs: "{{ verify_ssl }}"
    return_content: true
  with_sequence: start=1 end={{ total_pages }}
  register: job_list_results

- name: Combine all job results into a single list
  ansible.builtin.set_fact:
    all_jobs: "{{ all_jobs | default([]) + (job_list_results.results | map(attribute='json.results') | flatten) }}"

- name: Combine project data into all_projects
  ansible.builtin.set_fact:
    all_projects: "{{ all_projects | combine({
      project_id: {
        'all_jobs': all_jobs,
        'job_template_info': job_template_info.json,
        'project_info': project_info.json,
        'job_template_counts': job_template_counts
      }
    }) }}"